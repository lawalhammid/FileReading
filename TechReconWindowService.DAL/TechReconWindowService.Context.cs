//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechReconWindowService.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TechReconEntities : DbContext
    {
        public TechReconEntities()
            : base("name=TechReconEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<addCashCount> addCashCounts { get; set; }
        public virtual DbSet<admAccountType> admAccountTypes { get; set; }
        public virtual DbSet<admAgency> admAgencies { get; set; }
        public virtual DbSet<admATMType> admATMTypes { get; set; }
        public virtual DbSet<admBankBranch> admBankBranches { get; set; }
        public virtual DbSet<admBankMenuControl> admBankMenuControls { get; set; }
        public virtual DbSet<admBankRoleAssign> admBankRoleAssigns { get; set; }
        public virtual DbSet<admBank> admBanks { get; set; }
        public virtual DbSet<admChannel> admChannels { get; set; }
        public virtual DbSet<admClientProfile> admClientProfiles { get; set; }
        public virtual DbSet<admCountry> admCountries { get; set; }
        public virtual DbSet<admCurrency> admCurrencies { get; set; }
        public virtual DbSet<admCurrencyList> admCurrencyLists { get; set; }
        public virtual DbSet<admDatabaseType> admDatabaseTypes { get; set; }
        public virtual DbSet<admDataPullingControl> admDataPullingControls { get; set; }
        public virtual DbSet<admDataSource> admDataSources { get; set; }
        public virtual DbSet<admDBAudit> admDBAudits { get; set; }
        public virtual DbSet<admIsLocked> admIsLockeds { get; set; }
        public virtual DbSet<admLocation> admLocations { get; set; }
        public virtual DbSet<admMatchingCriteria> admMatchingCriterias { get; set; }
        public virtual DbSet<admMatchingTable> admMatchingTables { get; set; }
        public virtual DbSet<admMatchingType> admMatchingTypes { get; set; }
        public virtual DbSet<admMenuAssignment> admMenuAssignments { get; set; }
        public virtual DbSet<admMerchant> admMerchants { get; set; }
        public virtual DbSet<admObjectType> admObjectTypes { get; set; }
        public virtual DbSet<admPOS> admPOS { get; set; }
        public virtual DbSet<admReconAtm> admReconAtms { get; set; }
        public virtual DbSet<admReconConfig> admReconConfigs { get; set; }
        public virtual DbSet<admReconDataSource> admReconDataSources { get; set; }
        public virtual DbSet<admReconSource> admReconSources { get; set; }
        public virtual DbSet<admReconType> admReconTypes { get; set; }
        public virtual DbSet<admSourceAccount> admSourceAccounts { get; set; }
        public virtual DbSet<admStatusItem> admStatusItems { get; set; }
        public virtual DbSet<admTerminal> admTerminals { get; set; }
        public virtual DbSet<admUserProfile> admUserProfiles { get; set; }
        public virtual DbSet<AfricaWorldTran> AfricaWorldTrans { get; set; }
        public virtual DbSet<AfricaWorldTransDismissed> AfricaWorldTransDismisseds { get; set; }
        public virtual DbSet<AfricaWorldTransError> AfricaWorldTransErrors { get; set; }
        public virtual DbSet<AfricaWorldTransHistory> AfricaWorldTransHistories { get; set; }
        public virtual DbSet<AirtelTran> AirtelTrans { get; set; }
        public virtual DbSet<AirtelTransDismissed> AirtelTransDismisseds { get; set; }
        public virtual DbSet<AirtelTransError> AirtelTransErrors { get; set; }
        public virtual DbSet<AirtelTransHistory> AirtelTransHistories { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<atm_host> atm_host { get; set; }
        public virtual DbSet<ATMJournal> ATMJournals { get; set; }
        public virtual DbSet<BatchCounter> BatchCounters { get; set; }
        public virtual DbSet<card_acceptor> card_acceptor { get; set; }
        public virtual DbSet<CB> CBS { get; set; }
        public virtual DbSet<CBSAfricaWorldTran> CBSAfricaWorldTrans { get; set; }
        public virtual DbSet<CBSAfricaWorldTransDismissed> CBSAfricaWorldTransDismisseds { get; set; }
        public virtual DbSet<CBSAfricaWorldTransError> CBSAfricaWorldTransErrors { get; set; }
        public virtual DbSet<CBSAfricaWorldTransHistory> CBSAfricaWorldTransHistories { get; set; }
        public virtual DbSet<CBSAirtelTran> CBSAirtelTrans { get; set; }
        public virtual DbSet<CBSAirtelTransDismissed> CBSAirtelTransDismisseds { get; set; }
        public virtual DbSet<CBSAirtelTransError> CBSAirtelTransErrors { get; set; }
        public virtual DbSet<CBSAirtelTransHistory> CBSAirtelTransHistories { get; set; }
        public virtual DbSet<CbsAtmTransaction> CbsAtmTransactions { get; set; }
        public virtual DbSet<CBSConsortiumTransaction> CBSConsortiumTransactions { get; set; }
        public virtual DbSet<CBSConsortiumTransactionDismisssed> CBSConsortiumTransactionDismissseds { get; set; }
        public virtual DbSet<CBSConsortiumTransactionError> CBSConsortiumTransactionErrors { get; set; }
        public virtual DbSet<CBSConsortiumTransactionHistory> CBSConsortiumTransactionHistories { get; set; }
        public virtual DbSet<CBSMGTran> CBSMGTrans { get; set; }
        public virtual DbSet<CBSMGTransDismisssed> CBSMGTransDismissseds { get; set; }
        public virtual DbSet<CBSMGTransError> CBSMGTransErrors { get; set; }
        public virtual DbSet<CBSMGTransHistory> CBSMGTransHistories { get; set; }
        public virtual DbSet<CBSMTNTran> CBSMTNTrans { get; set; }
        public virtual DbSet<CBSMTNTransDismisssed> CBSMTNTransDismissseds { get; set; }
        public virtual DbSet<CBSMTNTransError> CBSMTNTransErrors { get; set; }
        public virtual DbSet<CBSMTNTransHistory> CBSMTNTransHistories { get; set; }
        public virtual DbSet<CBSNostroTran> CBSNostroTrans { get; set; }
        public virtual DbSet<CBSNostroTransDismisssed> CBSNostroTransDismissseds { get; set; }
        public virtual DbSet<CBSNostroTransError> CBSNostroTransErrors { get; set; }
        public virtual DbSet<CBSNostroTransHistory> CBSNostroTransHistories { get; set; }
        public virtual DbSet<CBSRiaTran> CBSRiaTrans { get; set; }
        public virtual DbSet<CBSRiaTransDismisssed> CBSRiaTransDismissseds { get; set; }
        public virtual DbSet<CBSRiaTransError> CBSRiaTransErrors { get; set; }
        public virtual DbSet<CBSRiaTransHistory> CBSRiaTransHistories { get; set; }
        public virtual DbSet<CBSUnityLinkTran> CBSUnityLinkTrans { get; set; }
        public virtual DbSet<CBSUnityLinkTransDismisssed> CBSUnityLinkTransDismissseds { get; set; }
        public virtual DbSet<CBSUnityLinkTransError> CBSUnityLinkTransErrors { get; set; }
        public virtual DbSet<CBSUnityLinkTransHistory> CBSUnityLinkTransHistories { get; set; }
        public virtual DbSet<CBSWUMTTran> CBSWUMTTrans { get; set; }
        public virtual DbSet<CBSWUMTTransDismisssed> CBSWUMTTransDismissseds { get; set; }
        public virtual DbSet<CBSWUMTTransError> CBSWUMTTransErrors { get; set; }
        public virtual DbSet<CBSWUMTTransHistory> CBSWUMTTransHistories { get; set; }
        public virtual DbSet<CBSXpressMoneyTran> CBSXpressMoneyTrans { get; set; }
        public virtual DbSet<CBSXpressMoneyTransDismisssed> CBSXpressMoneyTransDismissseds { get; set; }
        public virtual DbSet<CBSXpressMoneyTransError> CBSXpressMoneyTransErrors { get; set; }
        public virtual DbSet<CBSXpressMoneyTransHistory> CBSXpressMoneyTransHistories { get; set; }
        public virtual DbSet<ChargeExemption> ChargeExemptions { get; set; }
        public virtual DbSet<CompanyProfile> CompanyProfiles { get; set; }
        public virtual DbSet<ConsortiumTransaction> ConsortiumTransactions { get; set; }
        public virtual DbSet<ConsortiumTransactionDismisssed> ConsortiumTransactionDismissseds { get; set; }
        public virtual DbSet<ConsortiumTransactionError> ConsortiumTransactionErrors { get; set; }
        public virtual DbSet<ConsortiumTransactionHistory> ConsortiumTransactionHistories { get; set; }
        public virtual DbSet<core_banking> core_banking { get; set; }
        public virtual DbSet<CurrencyCode> CurrencyCodes { get; set; }
        public virtual DbSet<exception> exceptions { get; set; }
        public virtual DbSet<failed_import> failed_import { get; set; }
        public virtual DbSet<FailledFile> FailledFiles { get; set; }
        public virtual DbSet<field_mapping> field_mapping { get; set; }
        public virtual DbSet<FileProcessControl> FileProcessControls { get; set; }
        public virtual DbSet<finacle_card_acceptor> finacle_card_acceptor { get; set; }
        public virtual DbSet<generated_dates> generated_dates { get; set; }
        public virtual DbSet<glbal_failed_import> glbal_failed_import { get; set; }
        public virtual DbSet<glBalance> glBalances { get; set; }
        public virtual DbSet<JournalATM> JournalATMs { get; set; }
        public virtual DbSet<Journallog> Journallogs { get; set; }
        public virtual DbSet<JournalTran> JournalTrans { get; set; }
        public virtual DbSet<JournalTransError> JournalTransErrors { get; set; }
        public virtual DbSet<JournalTransHistory> JournalTransHistories { get; set; }
        public virtual DbSet<loaded_dates> loaded_dates { get; set; }
        public virtual DbSet<Membership> Memberships { get; set; }
        public virtual DbSet<MGTran> MGTrans { get; set; }
        public virtual DbSet<MGTransDismissed> MGTransDismisseds { get; set; }
        public virtual DbSet<MGTransError> MGTransErrors { get; set; }
        public virtual DbSet<MGTransHistory> MGTransHistories { get; set; }
        public virtual DbSet<MTNTRan> MTNTRans { get; set; }
        public virtual DbSet<MTNTransDismisssed> MTNTransDismissseds { get; set; }
        public virtual DbSet<MTNTRansError> MTNTRansErrors { get; set; }
        public virtual DbSet<MTNTRansHistory> MTNTRansHistories { get; set; }
        public virtual DbSet<PostilionTransaction> PostilionTransactions { get; set; }
        public virtual DbSet<Postillion> Postillions { get; set; }
        public virtual DbSet<proATMTran> proATMTrans { get; set; }
        public virtual DbSet<proCoreBankingTran> proCoreBankingTrans { get; set; }
        public virtual DbSet<proExceptionItem> proExceptionItems { get; set; }
        public virtual DbSet<Profile> Profiles { get; set; }
        public virtual DbSet<proGLBalance> proGLBalances { get; set; }
        public virtual DbSet<ResponseMessage> ResponseMessages { get; set; }
        public virtual DbSet<RiaTran> RiaTrans { get; set; }
        public virtual DbSet<RiaTransDismisssed> RiaTransDismissseds { get; set; }
        public virtual DbSet<RiaTransError> RiaTransErrors { get; set; }
        public virtual DbSet<RiaTransHistory> RiaTransHistories { get; set; }
        public virtual DbSet<RoleTable> RoleTables { get; set; }
        public virtual DbSet<rptDBAuditTrail> rptDBAuditTrails { get; set; }
        public virtual DbSet<SettementReport> SettementReports { get; set; }
        public virtual DbSet<tmpImportWUMT> tmpImportWUMTs { get; set; }
        public virtual DbSet<tmpVoyager> tmpVoyagers { get; set; }
        public virtual DbSet<UnityLinkTran> UnityLinkTrans { get; set; }
        public virtual DbSet<UnityLinkTransDismisssed> UnityLinkTransDismissseds { get; set; }
        public virtual DbSet<UnityLinkTransError> UnityLinkTransErrors { get; set; }
        public virtual DbSet<UnityLinkTransHistory> UnityLinkTransHistories { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VostroMT940950Trans> VostroMT940950Trans { get; set; }
        public virtual DbSet<VostroMT940950TransDismisssed> VostroMT940950TransDismisssed { get; set; }
        public virtual DbSet<VostroMT940950TransError> VostroMT940950TransError { get; set; }
        public virtual DbSet<VostroMT940950TransHistory> VostroMT940950TransHistory { get; set; }
        public virtual DbSet<voyager> voyagers { get; set; }
        public virtual DbSet<WUMTAgentSettlement> WUMTAgentSettlements { get; set; }
        public virtual DbSet<WUMTTran> WUMTTrans { get; set; }
        public virtual DbSet<WUMTTransDismisssed> WUMTTransDismissseds { get; set; }
        public virtual DbSet<WUMTTransError> WUMTTransErrors { get; set; }
        public virtual DbSet<WUMTTransHistory> WUMTTransHistories { get; set; }
        public virtual DbSet<XpressMoneyTran> XpressMoneyTrans { get; set; }
        public virtual DbSet<XpressMoneyTransDismisssed> XpressMoneyTransDismissseds { get; set; }
        public virtual DbSet<XpressMoneyTransError> XpressMoneyTransErrors { get; set; }
        public virtual DbSet<XpressMoneyTransHistory> XpressMoneyTransHistories { get; set; }
        public virtual DbSet<rptReconSummary> rptReconSummaries { get; set; }
    
        public virtual ObjectResult<BankroleMenu_Result> BankroleMenu(Nullable<int> roleid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankroleMenu_Result>("BankroleMenu", roleidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ComparePassword(Nullable<int> userId, string password)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ComparePassword", userIdParameter, passwordParameter);
        }
    
        public virtual int Isp_ConectToDBSource(string psDBType)
        {
            var psDBTypeParameter = psDBType != null ?
                new ObjectParameter("psDBType", psDBType) :
                new ObjectParameter("psDBType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Isp_ConectToDBSource", psDBTypeParameter);
        }
    
        public virtual ObjectResult<isp_UserRole_Result> isp_UserRole(Nullable<int> pnGrantParentId, Nullable<int> pnRoleId)
        {
            var pnGrantParentIdParameter = pnGrantParentId.HasValue ?
                new ObjectParameter("pnGrantParentId", pnGrantParentId) :
                new ObjectParameter("pnGrantParentId", typeof(int));
    
            var pnRoleIdParameter = pnRoleId.HasValue ?
                new ObjectParameter("pnRoleId", pnRoleId) :
                new ObjectParameter("pnRoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_UserRole_Result>("isp_UserRole", pnGrantParentIdParameter, pnRoleIdParameter);
        }
    
        public virtual int isp_whatever(string psColumnName, Nullable<int> pnTableObjectName)
        {
            var psColumnNameParameter = psColumnName != null ?
                new ObjectParameter("psColumnName", psColumnName) :
                new ObjectParameter("psColumnName", typeof(string));
    
            var pnTableObjectNameParameter = pnTableObjectName.HasValue ?
                new ObjectParameter("pnTableObjectName", pnTableObjectName) :
                new ObjectParameter("pnTableObjectName", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("isp_whatever", psColumnNameParameter, pnTableObjectNameParameter);
        }
    
        public virtual ObjectResult<ResetUserPwd_Result> ResetUserPwd()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ResetUserPwd_Result>("ResetUserPwd");
        }
    
        public virtual int roleMenu(Nullable<int> pnRoleId)
        {
            var pnRoleIdParameter = pnRoleId.HasValue ?
                new ObjectParameter("pnRoleId", pnRoleId) :
                new ObjectParameter("pnRoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("roleMenu", pnRoleIdParameter);
        }
    
        public virtual ObjectResult<sp_CurrencyDefined_Result> sp_CurrencyDefined(Nullable<int> itbId, string currency, string currencyCode, string currencyName, Nullable<int> currencyNumber, string status)
        {
            var itbIdParameter = itbId.HasValue ?
                new ObjectParameter("ItbId", itbId) :
                new ObjectParameter("ItbId", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var currencyNumberParameter = currencyNumber.HasValue ?
                new ObjectParameter("CurrencyNumber", currencyNumber) :
                new ObjectParameter("CurrencyNumber", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CurrencyDefined_Result>("sp_CurrencyDefined", itbIdParameter, currencyParameter, currencyCodeParameter, currencyNameParameter, currencyNumberParameter, statusParameter);
        }
    
        public virtual ObjectResult<sp_dataSourceConDetails_Result> sp_dataSourceConDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_dataSourceConDetails_Result>("sp_dataSourceConDetails");
        }
    
        public virtual int Sp_DeleteBankProfile(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DeleteBankProfile", idParameter);
        }
    
        public virtual int Sp_DeleteCurrency(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DeleteCurrency", idParameter);
        }
    
        public virtual int Sp_EditBankProfile(Nullable<int> id, string bankCode, string bankName, string bankAddress, Nullable<System.DateTime> currProcessingDate, string enableActiveDirectory, Nullable<short> adminLoginAttempts, string country, string bankingSystem, string status, Nullable<int> userId, Nullable<System.DateTime> dateCreated)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankAddressParameter = bankAddress != null ?
                new ObjectParameter("BankAddress", bankAddress) :
                new ObjectParameter("BankAddress", typeof(string));
    
            var currProcessingDateParameter = currProcessingDate.HasValue ?
                new ObjectParameter("CurrProcessingDate", currProcessingDate) :
                new ObjectParameter("CurrProcessingDate", typeof(System.DateTime));
    
            var enableActiveDirectoryParameter = enableActiveDirectory != null ?
                new ObjectParameter("EnableActiveDirectory", enableActiveDirectory) :
                new ObjectParameter("EnableActiveDirectory", typeof(string));
    
            var adminLoginAttemptsParameter = adminLoginAttempts.HasValue ?
                new ObjectParameter("AdminLoginAttempts", adminLoginAttempts) :
                new ObjectParameter("AdminLoginAttempts", typeof(short));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var bankingSystemParameter = bankingSystem != null ?
                new ObjectParameter("BankingSystem", bankingSystem) :
                new ObjectParameter("BankingSystem", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_EditBankProfile", idParameter, bankCodeParameter, bankNameParameter, bankAddressParameter, currProcessingDateParameter, enableActiveDirectoryParameter, adminLoginAttemptsParameter, countryParameter, bankingSystemParameter, statusParameter, userIdParameter, dateCreatedParameter);
        }
    
        public virtual int Sp_EditCurrency(Nullable<int> id, Nullable<int> currencyId, string currencyCode, string description, Nullable<int> userId, string status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_EditCurrency", idParameter, currencyIdParameter, currencyCodeParameter, descriptionParameter, userIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<sp_GetBankProfile_Result> sp_GetBankProfile()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBankProfile_Result>("sp_GetBankProfile");
        }
    
        public virtual ObjectResult<Sp_Read_BankProfile_Result> Sp_Read_BankProfile()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Read_BankProfile_Result>("Sp_Read_BankProfile");
        }
    
        public virtual ObjectResult<Sp_Read_Currency_Result> Sp_Read_Currency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Read_Currency_Result>("Sp_Read_Currency");
        }
    
        public virtual ObjectResult<Sp_UserProfileByUserId_Result> Sp_UserProfileByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UserProfileByUserId_Result>("Sp_UserProfileByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spDBConnection(string databaseType, string ipAddress, string portNumber, string databaseName, string loginId, string password)
        {
            var databaseTypeParameter = databaseType != null ?
                new ObjectParameter("DatabaseType", databaseType) :
                new ObjectParameter("DatabaseType", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var portNumberParameter = portNumber != null ?
                new ObjectParameter("PortNumber", portNumber) :
                new ObjectParameter("PortNumber", typeof(string));
    
            var databaseNameParameter = databaseName != null ?
                new ObjectParameter("DatabaseName", databaseName) :
                new ObjectParameter("DatabaseName", typeof(string));
    
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spDBConnection", databaseTypeParameter, ipAddressParameter, portNumberParameter, databaseNameParameter, loginIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spMatchingTable_Result> spMatchingTable(string psTableName)
        {
            var psTableNameParameter = psTableName != null ?
                new ObjectParameter("psTableName", psTableName) :
                new ObjectParameter("psTableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMatchingTable_Result>("spMatchingTable", psTableNameParameter);
        }
    
        public virtual int spUpdateadmBankProfile(Nullable<int> itbId, string bankCode, string bankName, string bankAddress, Nullable<System.DateTime> currProcessingDate, Nullable<bool> enableActiveDirectory, string country, string bankingSystem, Nullable<short> adminLoginAttempts, string status, Nullable<int> userId, Nullable<System.DateTime> dateCreated, Nullable<int> adminSessionTimeOutMinutes)
        {
            var itbIdParameter = itbId.HasValue ?
                new ObjectParameter("ItbId", itbId) :
                new ObjectParameter("ItbId", typeof(int));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankAddressParameter = bankAddress != null ?
                new ObjectParameter("BankAddress", bankAddress) :
                new ObjectParameter("BankAddress", typeof(string));
    
            var currProcessingDateParameter = currProcessingDate.HasValue ?
                new ObjectParameter("CurrProcessingDate", currProcessingDate) :
                new ObjectParameter("CurrProcessingDate", typeof(System.DateTime));
    
            var enableActiveDirectoryParameter = enableActiveDirectory.HasValue ?
                new ObjectParameter("EnableActiveDirectory", enableActiveDirectory) :
                new ObjectParameter("EnableActiveDirectory", typeof(bool));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var bankingSystemParameter = bankingSystem != null ?
                new ObjectParameter("BankingSystem", bankingSystem) :
                new ObjectParameter("BankingSystem", typeof(string));
    
            var adminLoginAttemptsParameter = adminLoginAttempts.HasValue ?
                new ObjectParameter("AdminLoginAttempts", adminLoginAttempts) :
                new ObjectParameter("AdminLoginAttempts", typeof(short));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var adminSessionTimeOutMinutesParameter = adminSessionTimeOutMinutes.HasValue ?
                new ObjectParameter("AdminSessionTimeOutMinutes", adminSessionTimeOutMinutes) :
                new ObjectParameter("AdminSessionTimeOutMinutes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateadmBankProfile", itbIdParameter, bankCodeParameter, bankNameParameter, bankAddressParameter, currProcessingDateParameter, enableActiveDirectoryParameter, countryParameter, bankingSystemParameter, adminLoginAttemptsParameter, statusParameter, userIdParameter, dateCreatedParameter, adminSessionTimeOutMinutesParameter);
        }
    
        public virtual int spUpdateBankProfile(Nullable<int> itbId, string bankCode, string bankName, string bankAddress, Nullable<System.DateTime> currProcessingDate, string enableActiveDirectory, string country, string bankingSystem, string status, Nullable<int> userId, Nullable<System.DateTime> dateCreated)
        {
            var itbIdParameter = itbId.HasValue ?
                new ObjectParameter("ItbId", itbId) :
                new ObjectParameter("ItbId", typeof(int));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankAddressParameter = bankAddress != null ?
                new ObjectParameter("BankAddress", bankAddress) :
                new ObjectParameter("BankAddress", typeof(string));
    
            var currProcessingDateParameter = currProcessingDate.HasValue ?
                new ObjectParameter("CurrProcessingDate", currProcessingDate) :
                new ObjectParameter("CurrProcessingDate", typeof(System.DateTime));
    
            var enableActiveDirectoryParameter = enableActiveDirectory != null ?
                new ObjectParameter("EnableActiveDirectory", enableActiveDirectory) :
                new ObjectParameter("EnableActiveDirectory", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var bankingSystemParameter = bankingSystem != null ?
                new ObjectParameter("BankingSystem", bankingSystem) :
                new ObjectParameter("BankingSystem", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateBankProfile", itbIdParameter, bankCodeParameter, bankNameParameter, bankAddressParameter, currProcessingDateParameter, enableActiveDirectoryParameter, countryParameter, bankingSystemParameter, statusParameter, userIdParameter, dateCreatedParameter);
        }
    
        public virtual int spUpdateChannel(Nullable<int> itbId, string channelId, string description, string interfaceAcctNo, string matchingAccotNo, string status, Nullable<int> userId, Nullable<System.DateTime> dateCreated)
        {
            var itbIdParameter = itbId.HasValue ?
                new ObjectParameter("ItbId", itbId) :
                new ObjectParameter("ItbId", typeof(int));
    
            var channelIdParameter = channelId != null ?
                new ObjectParameter("ChannelId", channelId) :
                new ObjectParameter("ChannelId", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var interfaceAcctNoParameter = interfaceAcctNo != null ?
                new ObjectParameter("InterfaceAcctNo", interfaceAcctNo) :
                new ObjectParameter("InterfaceAcctNo", typeof(string));
    
            var matchingAccotNoParameter = matchingAccotNo != null ?
                new ObjectParameter("MatchingAccotNo", matchingAccotNo) :
                new ObjectParameter("MatchingAccotNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateChannel", itbIdParameter, channelIdParameter, descriptionParameter, interfaceAcctNoParameter, matchingAccotNoParameter, statusParameter, userIdParameter, dateCreatedParameter);
        }
    
        public virtual ObjectResult<isp_consortiumTransHist_Result> isp_consortiumTransHist(Nullable<long> pnSerialNo, string psAcctNo, Nullable<decimal> pnAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate, string psTableName)
        {
            var pnSerialNoParameter = pnSerialNo.HasValue ?
                new ObjectParameter("pnSerialNo", pnSerialNo) :
                new ObjectParameter("pnSerialNo", typeof(long));
    
            var psAcctNoParameter = psAcctNo != null ?
                new ObjectParameter("psAcctNo", psAcctNo) :
                new ObjectParameter("psAcctNo", typeof(string));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("pnAmount", pnAmount) :
                new ObjectParameter("pnAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            var psTableNameParameter = psTableName != null ?
                new ObjectParameter("psTableName", psTableName) :
                new ObjectParameter("psTableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_consortiumTransHist_Result>("isp_consortiumTransHist", pnSerialNoParameter, psAcctNoParameter, pnAmountParameter, pdtStartDateParameter, pdtEndDateParameter, psTableNameParameter);
        }
    
        public virtual ObjectResult<isp_ConsortiumTransHistList_Result> isp_ConsortiumTransHistList(string pnSerialNo, Nullable<decimal> pnAmount, string pnAccountNo, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pnSerialNoParameter = pnSerialNo != null ?
                new ObjectParameter("pnSerialNo", pnSerialNo) :
                new ObjectParameter("pnSerialNo", typeof(string));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("PnAmount", pnAmount) :
                new ObjectParameter("PnAmount", typeof(decimal));
    
            var pnAccountNoParameter = pnAccountNo != null ?
                new ObjectParameter("pnAccountNo", pnAccountNo) :
                new ObjectParameter("pnAccountNo", typeof(string));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_ConsortiumTransHistList_Result>("isp_ConsortiumTransHistList", pnSerialNoParameter, pnAmountParameter, pnAccountNoParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<isp_ConsortiumTransView_Result> isp_ConsortiumTransView(string pnSerialNo)
        {
            var pnSerialNoParameter = pnSerialNo != null ?
                new ObjectParameter("pnSerialNo", pnSerialNo) :
                new ObjectParameter("pnSerialNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_ConsortiumTransView_Result>("isp_ConsortiumTransView", pnSerialNoParameter);
        }
    
        public virtual ObjectResult<isp_RiaHistList_Result> isp_RiaHistList(string pnTransNo, Nullable<decimal> pnAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pnTransNoParameter = pnTransNo != null ?
                new ObjectParameter("pnTransNo", pnTransNo) :
                new ObjectParameter("pnTransNo", typeof(string));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("PnAmount", pnAmount) :
                new ObjectParameter("PnAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_RiaHistList_Result>("isp_RiaHistList", pnTransNoParameter, pnAmountParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<isp_RiaTransHist_Result> isp_RiaTransHist(Nullable<long> pnTransactionNo, string psAcctNo, Nullable<decimal> pnPaidAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate, string psTableName)
        {
            var pnTransactionNoParameter = pnTransactionNo.HasValue ?
                new ObjectParameter("pnTransactionNo", pnTransactionNo) :
                new ObjectParameter("pnTransactionNo", typeof(long));
    
            var psAcctNoParameter = psAcctNo != null ?
                new ObjectParameter("psAcctNo", psAcctNo) :
                new ObjectParameter("psAcctNo", typeof(string));
    
            var pnPaidAmountParameter = pnPaidAmount.HasValue ?
                new ObjectParameter("pnPaidAmount", pnPaidAmount) :
                new ObjectParameter("pnPaidAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            var psTableNameParameter = psTableName != null ?
                new ObjectParameter("psTableName", psTableName) :
                new ObjectParameter("psTableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_RiaTransHist_Result>("isp_RiaTransHist", pnTransactionNoParameter, psAcctNoParameter, pnPaidAmountParameter, pdtStartDateParameter, pdtEndDateParameter, psTableNameParameter);
        }
    
        public virtual ObjectResult<isp_RiaTransView_Result> isp_RiaTransView(string pnTransNo, string errorMsg)
        {
            var pnTransNoParameter = pnTransNo != null ?
                new ObjectParameter("pnTransNo", pnTransNo) :
                new ObjectParameter("pnTransNo", typeof(string));
    
            var errorMsgParameter = errorMsg != null ?
                new ObjectParameter("ErrorMsg", errorMsg) :
                new ObjectParameter("ErrorMsg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_RiaTransView_Result>("isp_RiaTransView", pnTransNoParameter, errorMsgParameter);
        }
    
        public virtual ObjectResult<isp_XpressMoneyTransHist_Result> isp_XpressMoneyTransHist(Nullable<long> pnTransactionNo, string psAcctNo, Nullable<decimal> pnPaidAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate, string psTableName)
        {
            var pnTransactionNoParameter = pnTransactionNo.HasValue ?
                new ObjectParameter("pnTransactionNo", pnTransactionNo) :
                new ObjectParameter("pnTransactionNo", typeof(long));
    
            var psAcctNoParameter = psAcctNo != null ?
                new ObjectParameter("psAcctNo", psAcctNo) :
                new ObjectParameter("psAcctNo", typeof(string));
    
            var pnPaidAmountParameter = pnPaidAmount.HasValue ?
                new ObjectParameter("pnPaidAmount", pnPaidAmount) :
                new ObjectParameter("pnPaidAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            var psTableNameParameter = psTableName != null ?
                new ObjectParameter("psTableName", psTableName) :
                new ObjectParameter("psTableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_XpressMoneyTransHist_Result>("isp_XpressMoneyTransHist", pnTransactionNoParameter, psAcctNoParameter, pnPaidAmountParameter, pdtStartDateParameter, pdtEndDateParameter, psTableNameParameter);
        }
    
        public virtual ObjectResult<isp_XpressMoneyTransHistList_Result> isp_XpressMoneyTransHistList(string pnReferenceNo, Nullable<decimal> pnAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pnReferenceNoParameter = pnReferenceNo != null ?
                new ObjectParameter("pnReferenceNo", pnReferenceNo) :
                new ObjectParameter("pnReferenceNo", typeof(string));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("PnAmount", pnAmount) :
                new ObjectParameter("PnAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_XpressMoneyTransHistList_Result>("isp_XpressMoneyTransHistList", pnReferenceNoParameter, pnAmountParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<isp_XpresssMTransView_Result> isp_XpresssMTransView(string pnReferenceNo)
        {
            var pnReferenceNoParameter = pnReferenceNo != null ?
                new ObjectParameter("pnReferenceNo", pnReferenceNo) :
                new ObjectParameter("pnReferenceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_XpresssMTransView_Result>("isp_XpresssMTransView", pnReferenceNoParameter);
        }
    
        public virtual ObjectResult<isp_WesternUnionHistList_Result> isp_WesternUnionHistList(string pnTransRef, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pnTransRefParameter = pnTransRef != null ?
                new ObjectParameter("pnTransRef", pnTransRef) :
                new ObjectParameter("pnTransRef", typeof(string));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_WesternUnionHistList_Result>("isp_WesternUnionHistList", pnTransRefParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<isp_WUMTTransView_Result> isp_WUMTTransView(string pnRefNo)
        {
            var pnRefNoParameter = pnRefNo != null ?
                new ObjectParameter("pnRefNo", pnRefNo) :
                new ObjectParameter("pnRefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_WUMTTransView_Result>("isp_WUMTTransView", pnRefNoParameter);
        }
    
        public virtual ObjectResult<isp_ConsortiumTransErrorList_Result> isp_ConsortiumTransErrorList(string vsConsortiumTrans)
        {
            var vsConsortiumTransParameter = vsConsortiumTrans != null ?
                new ObjectParameter("vsConsortiumTrans", vsConsortiumTrans) :
                new ObjectParameter("vsConsortiumTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_ConsortiumTransErrorList_Result>("isp_ConsortiumTransErrorList", vsConsortiumTransParameter);
        }
    
        public virtual ObjectResult<isp_MGErrorView_Result> isp_MGErrorView(string vsRefNo, string psCBSTrans)
        {
            var vsRefNoParameter = vsRefNo != null ?
                new ObjectParameter("vsRefNo", vsRefNo) :
                new ObjectParameter("vsRefNo", typeof(string));
    
            var psCBSTransParameter = psCBSTrans != null ?
                new ObjectParameter("psCBSTrans", psCBSTrans) :
                new ObjectParameter("psCBSTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_MGErrorView_Result>("isp_MGErrorView", vsRefNoParameter, psCBSTransParameter);
        }
    
        public virtual ObjectResult<isp_MGTransErrorList_Result> isp_MGTransErrorList(string vsRefNo)
        {
            var vsRefNoParameter = vsRefNo != null ?
                new ObjectParameter("vsRefNo", vsRefNo) :
                new ObjectParameter("vsRefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_MGTransErrorList_Result>("isp_MGTransErrorList", vsRefNoParameter);
        }
    
        public virtual ObjectResult<isp_MoneyGramErrorList_Result> isp_MoneyGramErrorList(string vsMoneyGramTrans)
        {
            var vsMoneyGramTransParameter = vsMoneyGramTrans != null ?
                new ObjectParameter("vsMoneyGramTrans", vsMoneyGramTrans) :
                new ObjectParameter("vsMoneyGramTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_MoneyGramErrorList_Result>("isp_MoneyGramErrorList", vsMoneyGramTransParameter);
        }
    
        public virtual ObjectResult<isp_MoneyGramHistList_Result> isp_MoneyGramHistList(string pnTransRef, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate, string psError)
        {
            var pnTransRefParameter = pnTransRef != null ?
                new ObjectParameter("pnTransRef", pnTransRef) :
                new ObjectParameter("pnTransRef", typeof(string));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            var psErrorParameter = psError != null ?
                new ObjectParameter("psError", psError) :
                new ObjectParameter("psError", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_MoneyGramHistList_Result>("isp_MoneyGramHistList", pnTransRefParameter, pdtStartDateParameter, pdtEndDateParameter, psErrorParameter);
        }
    
        public virtual ObjectResult<isp_MoneyGramTransView_Result> isp_MoneyGramTransView(string pnRefNo, string errorMsg)
        {
            var pnRefNoParameter = pnRefNo != null ?
                new ObjectParameter("pnRefNo", pnRefNo) :
                new ObjectParameter("pnRefNo", typeof(string));
    
            var errorMsgParameter = errorMsg != null ?
                new ObjectParameter("ErrorMsg", errorMsg) :
                new ObjectParameter("ErrorMsg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_MoneyGramTransView_Result>("isp_MoneyGramTransView", pnRefNoParameter, errorMsgParameter);
        }
    
        public virtual ObjectResult<isp_RiaTransErrorList_Result> isp_RiaTransErrorList(string vsRiaTrans)
        {
            var vsRiaTransParameter = vsRiaTrans != null ?
                new ObjectParameter("vsRiaTrans", vsRiaTrans) :
                new ObjectParameter("vsRiaTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_RiaTransErrorList_Result>("isp_RiaTransErrorList", vsRiaTransParameter);
        }
    
        public virtual ObjectResult<isp_WesternUnionErrorList_Result> isp_WesternUnionErrorList(string vsWesternUnionTrans)
        {
            var vsWesternUnionTransParameter = vsWesternUnionTrans != null ?
                new ObjectParameter("vsWesternUnionTrans", vsWesternUnionTrans) :
                new ObjectParameter("vsWesternUnionTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_WesternUnionErrorList_Result>("isp_WesternUnionErrorList", vsWesternUnionTransParameter);
        }
    
        public virtual ObjectResult<isp_WUMTErrorView_Result> isp_WUMTErrorView(string vsRefNo, string psCBSTrans)
        {
            var vsRefNoParameter = vsRefNo != null ?
                new ObjectParameter("vsRefNo", vsRefNo) :
                new ObjectParameter("vsRefNo", typeof(string));
    
            var psCBSTransParameter = psCBSTrans != null ?
                new ObjectParameter("psCBSTrans", psCBSTrans) :
                new ObjectParameter("psCBSTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_WUMTErrorView_Result>("isp_WUMTErrorView", vsRefNoParameter, psCBSTransParameter);
        }
    
        public virtual ObjectResult<isp_XMErrorView_Result> isp_XMErrorView(string vsRefNo, string psCBSTrans)
        {
            var vsRefNoParameter = vsRefNo != null ?
                new ObjectParameter("vsRefNo", vsRefNo) :
                new ObjectParameter("vsRefNo", typeof(string));
    
            var psCBSTransParameter = psCBSTrans != null ?
                new ObjectParameter("psCBSTrans", psCBSTrans) :
                new ObjectParameter("psCBSTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_XMErrorView_Result>("isp_XMErrorView", vsRefNoParameter, psCBSTransParameter);
        }
    
        public virtual ObjectResult<isp_XMTransErrorList_Result> isp_XMTransErrorList(string vsXMTrans)
        {
            var vsXMTransParameter = vsXMTrans != null ?
                new ObjectParameter("vsXMTrans", vsXMTrans) :
                new ObjectParameter("vsXMTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_XMTransErrorList_Result>("isp_XMTransErrorList", vsXMTransParameter);
        }
    
        public virtual ObjectResult<isp_ConsortiumErrorView_Result> isp_ConsortiumErrorView(string pnSerialNo, string psCBSTrans)
        {
            var pnSerialNoParameter = pnSerialNo != null ?
                new ObjectParameter("pnSerialNo", pnSerialNo) :
                new ObjectParameter("pnSerialNo", typeof(string));
    
            var psCBSTransParameter = psCBSTrans != null ?
                new ObjectParameter("psCBSTrans", psCBSTrans) :
                new ObjectParameter("psCBSTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_ConsortiumErrorView_Result>("isp_ConsortiumErrorView", pnSerialNoParameter, psCBSTransParameter);
        }
    
        public virtual ObjectResult<isp_AirtelTransHistList_Result> isp_AirtelTransHistList(string pnTransRef, Nullable<decimal> pnAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pnTransRefParameter = pnTransRef != null ?
                new ObjectParameter("pnTransRef", pnTransRef) :
                new ObjectParameter("pnTransRef", typeof(string));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("PnAmount", pnAmount) :
                new ObjectParameter("PnAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_AirtelTransHistList_Result>("isp_AirtelTransHistList", pnTransRefParameter, pnAmountParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<Isp_ConsortiumException_Result> Isp_ConsortiumException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_ConsortiumException_Result>("Isp_ConsortiumException");
        }
    
        public virtual ObjectResult<Isp_ConsortiumTransactionReport_Result> Isp_ConsortiumTransactionReport(Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_ConsortiumTransactionReport_Result>("Isp_ConsortiumTransactionReport", pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<isp_MTNErrorView_Result> isp_MTNErrorView(string pnReference, string psCBSTrans)
        {
            var pnReferenceParameter = pnReference != null ?
                new ObjectParameter("pnReference", pnReference) :
                new ObjectParameter("pnReference", typeof(string));
    
            var psCBSTransParameter = psCBSTrans != null ?
                new ObjectParameter("psCBSTrans", psCBSTrans) :
                new ObjectParameter("psCBSTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_MTNErrorView_Result>("isp_MTNErrorView", pnReferenceParameter, psCBSTransParameter);
        }
    
        public virtual ObjectResult<isp_MtnTransErrorList_Result> isp_MtnTransErrorList(string vsUnityLinkTrans)
        {
            var vsUnityLinkTransParameter = vsUnityLinkTrans != null ?
                new ObjectParameter("vsUnityLinkTrans", vsUnityLinkTrans) :
                new ObjectParameter("vsUnityLinkTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_MtnTransErrorList_Result>("isp_MtnTransErrorList", vsUnityLinkTransParameter);
        }
    
        public virtual ObjectResult<isp_MTNTransHistList_Result> isp_MTNTransHistList(string pnTransRef, Nullable<decimal> pnAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pnTransRefParameter = pnTransRef != null ?
                new ObjectParameter("pnTransRef", pnTransRef) :
                new ObjectParameter("pnTransRef", typeof(string));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("PnAmount", pnAmount) :
                new ObjectParameter("PnAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_MTNTransHistList_Result>("isp_MTNTransHistList", pnTransRefParameter, pnAmountParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<isp_MTNTransView_Result> isp_MTNTransView(string pnTranRef)
        {
            var pnTranRefParameter = pnTranRef != null ?
                new ObjectParameter("pnTranRef", pnTranRef) :
                new ObjectParameter("pnTranRef", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_MTNTransView_Result>("isp_MTNTransView", pnTranRefParameter);
        }
    
        public virtual ObjectResult<isp_RialErrorView_Result> isp_RialErrorView(string vsRefNo, string psCBSTrans)
        {
            var vsRefNoParameter = vsRefNo != null ?
                new ObjectParameter("vsRefNo", vsRefNo) :
                new ObjectParameter("vsRefNo", typeof(string));
    
            var psCBSTransParameter = psCBSTrans != null ?
                new ObjectParameter("psCBSTrans", psCBSTrans) :
                new ObjectParameter("psCBSTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_RialErrorView_Result>("isp_RialErrorView", vsRefNoParameter, psCBSTransParameter);
        }
    
        public virtual ObjectResult<isp_UnityLinkErrorView_Result> isp_UnityLinkErrorView(string pnReference, string psCBSTrans)
        {
            var pnReferenceParameter = pnReference != null ?
                new ObjectParameter("pnReference", pnReference) :
                new ObjectParameter("pnReference", typeof(string));
    
            var psCBSTransParameter = psCBSTrans != null ?
                new ObjectParameter("psCBSTrans", psCBSTrans) :
                new ObjectParameter("psCBSTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_UnityLinkErrorView_Result>("isp_UnityLinkErrorView", pnReferenceParameter, psCBSTransParameter);
        }
    
        public virtual ObjectResult<isp_UnityLinkTransErrorList_Result> isp_UnityLinkTransErrorList(string vsUnityLinkTrans)
        {
            var vsUnityLinkTransParameter = vsUnityLinkTrans != null ?
                new ObjectParameter("vsUnityLinkTrans", vsUnityLinkTrans) :
                new ObjectParameter("vsUnityLinkTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_UnityLinkTransErrorList_Result>("isp_UnityLinkTransErrorList", vsUnityLinkTransParameter);
        }
    
        public virtual ObjectResult<isp_UnityLinkTransHistList_Result> isp_UnityLinkTransHistList(string pnTransRef, Nullable<decimal> pnAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pnTransRefParameter = pnTransRef != null ?
                new ObjectParameter("pnTransRef", pnTransRef) :
                new ObjectParameter("pnTransRef", typeof(string));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("PnAmount", pnAmount) :
                new ObjectParameter("PnAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_UnityLinkTransHistList_Result>("isp_UnityLinkTransHistList", pnTransRefParameter, pnAmountParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<isp_UnityLinkTransView_Result> isp_UnityLinkTransView(string pnTranRef)
        {
            var pnTranRefParameter = pnTranRef != null ?
                new ObjectParameter("pnTranRef", pnTranRef) :
                new ObjectParameter("pnTranRef", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_UnityLinkTransView_Result>("isp_UnityLinkTransView", pnTranRefParameter);
        }
    
        public virtual ObjectResult<isp_NostroTransHistList_Result> isp_NostroTransHistList(string pnTranRef, Nullable<decimal> pnAmount, string pnAccountNo, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pnTranRefParameter = pnTranRef != null ?
                new ObjectParameter("pnTranRef", pnTranRef) :
                new ObjectParameter("pnTranRef", typeof(string));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("PnAmount", pnAmount) :
                new ObjectParameter("PnAmount", typeof(decimal));
    
            var pnAccountNoParameter = pnAccountNo != null ?
                new ObjectParameter("pnAccountNo", pnAccountNo) :
                new ObjectParameter("pnAccountNo", typeof(string));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_NostroTransHistList_Result>("isp_NostroTransHistList", pnTranRefParameter, pnAmountParameter, pnAccountNoParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<isp_WUMTTransErrorList_Result> isp_WUMTTransErrorList(string vsRefNo)
        {
            var vsRefNoParameter = vsRefNo != null ?
                new ObjectParameter("vsRefNo", vsRefNo) :
                new ObjectParameter("vsRefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_WUMTTransErrorList_Result>("isp_WUMTTransErrorList", vsRefNoParameter);
        }
    
        public virtual int isp_AfricaWorldTransHistList(string pnTranRef, Nullable<decimal> pnAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var pnTranRefParameter = pnTranRef != null ?
                new ObjectParameter("pnTranRef", pnTranRef) :
                new ObjectParameter("pnTranRef", typeof(string));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("PnAmount", pnAmount) :
                new ObjectParameter("PnAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("isp_AfricaWorldTransHistList", pnTranRefParameter, pnAmountParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    
        public virtual ObjectResult<Isp_UpdateAuditReport_Result> Isp_UpdateAuditReport(string psLoginId, Nullable<System.DateTime> pdtFromDate, Nullable<System.DateTime> pdtToDate)
        {
            var psLoginIdParameter = psLoginId != null ?
                new ObjectParameter("psLoginId", psLoginId) :
                new ObjectParameter("psLoginId", typeof(string));
    
            var pdtFromDateParameter = pdtFromDate.HasValue ?
                new ObjectParameter("pdtFromDate", pdtFromDate) :
                new ObjectParameter("pdtFromDate", typeof(System.DateTime));
    
            var pdtToDateParameter = pdtToDate.HasValue ?
                new ObjectParameter("pdtToDate", pdtToDate) :
                new ObjectParameter("pdtToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_UpdateAuditReport_Result>("Isp_UpdateAuditReport", psLoginIdParameter, pdtFromDateParameter, pdtToDateParameter);
        }
    
        public virtual ObjectResult<isp_ReconSummary_Result> isp_ReconSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_ReconSummary_Result>("isp_ReconSummary");
        }
    
        public virtual ObjectResult<Isp_AWAException_Result> Isp_AWAException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_AWAException_Result>("Isp_AWAException");
        }
    
        public virtual ObjectResult<Isp_MGException_Result> Isp_MGException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_MGException_Result>("Isp_MGException");
        }
    
        public virtual ObjectResult<Isp_MTNException_Result> Isp_MTNException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_MTNException_Result>("Isp_MTNException");
        }
    
        public virtual ObjectResult<Isp_NostroVostroException_Result> Isp_NostroVostroException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_NostroVostroException_Result>("Isp_NostroVostroException");
        }
    
        public virtual ObjectResult<Isp_RiaException_Result> Isp_RiaException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_RiaException_Result>("Isp_RiaException");
        }
    
        public virtual ObjectResult<Isp_ULException_Result> Isp_ULException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_ULException_Result>("Isp_ULException");
        }
    
        public virtual ObjectResult<Isp_WUMTException_Result> Isp_WUMTException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_WUMTException_Result>("Isp_WUMTException");
        }
    
        public virtual ObjectResult<Isp_XMException_Result> Isp_XMException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Isp_XMException_Result>("Isp_XMException");
        }
    
        public virtual ObjectResult<isp_ConsortiumDismissedList_Result> isp_ConsortiumDismissedList(string vsConsortiumTrans, Nullable<long> pnSerialNo, Nullable<long> pnDismissedBy, Nullable<decimal> pnAmount, Nullable<System.DateTime> pdtStartDate, Nullable<System.DateTime> pdtEndDate)
        {
            var vsConsortiumTransParameter = vsConsortiumTrans != null ?
                new ObjectParameter("vsConsortiumTrans", vsConsortiumTrans) :
                new ObjectParameter("vsConsortiumTrans", typeof(string));
    
            var pnSerialNoParameter = pnSerialNo.HasValue ?
                new ObjectParameter("pnSerialNo", pnSerialNo) :
                new ObjectParameter("pnSerialNo", typeof(long));
    
            var pnDismissedByParameter = pnDismissedBy.HasValue ?
                new ObjectParameter("pnDismissedBy", pnDismissedBy) :
                new ObjectParameter("pnDismissedBy", typeof(long));
    
            var pnAmountParameter = pnAmount.HasValue ?
                new ObjectParameter("pnAmount", pnAmount) :
                new ObjectParameter("pnAmount", typeof(decimal));
    
            var pdtStartDateParameter = pdtStartDate.HasValue ?
                new ObjectParameter("pdtStartDate", pdtStartDate) :
                new ObjectParameter("pdtStartDate", typeof(System.DateTime));
    
            var pdtEndDateParameter = pdtEndDate.HasValue ?
                new ObjectParameter("pdtEndDate", pdtEndDate) :
                new ObjectParameter("pdtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<isp_ConsortiumDismissedList_Result>("isp_ConsortiumDismissedList", vsConsortiumTransParameter, pnSerialNoParameter, pnDismissedByParameter, pnAmountParameter, pdtStartDateParameter, pdtEndDateParameter);
        }
    }
}
